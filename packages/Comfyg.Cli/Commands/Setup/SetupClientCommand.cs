using System.CommandLine;
using System.CommandLine.Invocation;
using System.Security.Cryptography;
using System.Security.Cryptography.X509Certificates;
using Comfyg.Cli.Extensions;
using Spectre.Console;

namespace Comfyg.Cli.Commands.Setup;

internal class SetupClientCommand : Command
{
    private readonly Argument<string> _clientIdArgument;
    private readonly Argument<string> _friendlyNameArgument;
    private readonly Option<FileInfo?> _keysOption;

    public SetupClientCommand() : base("client", "Registers a new client on the connected Comfyg store.")
    {
        _clientIdArgument = new Argument<string>("CLIENT_ID",
            "The ID of the client to create. This must be unique for the connected Comfyg store.");
        AddArgument(_clientIdArgument);

        _friendlyNameArgument = new Argument<string>("FRIENDLY_NAME",
            "The user friendly display name which is used for the created client.");
        AddArgument(_friendlyNameArgument);

        _keysOption = new Option<FileInfo?>(new[] { "-k", "--keys" },
            "Path to a RFC 7468 PEM-encoded file containing the public key portion of the client secret and the private key portion for end-to-end encryption. If not provided, a symmetric client secret will be generated by the Comfyg store and no encryption will be applied.");
        AddOption(_keysOption);

        this.SetHandler(HandleCommandAsync);
    }

    private async Task HandleCommandAsync(InvocationContext context)
    {
        var clientIdArgument = context.ParseResult.GetValueForArgument(_clientIdArgument);
        var friendlyNameArgument = context.ParseResult.GetValueForArgument(_friendlyNameArgument);
        var keysOption = context.ParseResult.GetValueForOption(_keysOption);

        var cancellationToken = context.GetCancellationToken();

        RSA? keys = null;
        if (keysOption != null)
        {
            if (!keysOption.Exists)
                throw new FileNotFoundException("Could not find provided pem file.", keysOption.FullName);

            var pemContent = await File.ReadAllTextAsync(keysOption.FullName, cancellationToken);

            keys = RSA.Create();
            keys.ImportFromPem(pemContent);
        }

        using var client = await State.User.RequireClientAsync(cancellationToken);

        var result = await client.SetupClientAsync(
            new Client.Client(clientIdArgument, friendlyNameArgument, keys != null), keys, cancellationToken);

        keys?.Dispose();

        AnsiConsole.MarkupLine($"[bold green]Successfully created a client for {client.EndpointUrl}[/]");

        AnsiConsole.Write(result.Client.ToTable(result.ClientSecret));

        if (!result.Client.IsAsymmetric)
            AnsiConsole.MarkupLine("[bold yellow]Make sure to copy the client secret before closing the terminal![/]");

        AnsiConsole.WriteLine("You can connect with this client using the following connection string:");

        var clientSecret = !result.Client.IsAsymmetric ? result.ClientSecret : keysOption!.FullName;
        AnsiConsole.MarkupLine(
            $"[bold]Endpoint={client.EndpointUrl};ClientId={result.Client.ClientId};ClientSecret={clientSecret};[/]");
    }
}
